{"version":3,"sources":["components/Thing.js","components/Column.js","data.js","index.js"],"names":["Thing","draggableId","this","props","thing","id","index","provided","className","draggableProps","dragHandleProps","ref","innerRef","content","React","Component","Column","column","title","droppableId","droppableProps","things","map","key","placeholder","data","columns","thingIds","columnOrder","App","state","previousState","futureState","logState","e","console","log","undo","unshift","setState","length","splice","redo","push","shift","onDragEnd","result","destination","source","start","finish","newThingIds","Array","from","newColumn","newState","startThingIds","newStart","finishThingIds","newFinish","columnId","thingId","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.988e131c.chunk.js","sourcesContent":["import React from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\n\nexport default class Thing extends React.Component {\n    render() {\n        return ( \n        <Draggable draggableId={this.props.thing.id} index={this.props.index}>\n            {(provided) => (\n                <div className=\"thingContainer\"\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                    ref={provided.innerRef}\n                >\n                {this.props.thing.content}\n                </div>\n            )}\n        </Draggable>\n        );\n    }\n}","import React from 'react';\nimport { Droppable } from 'react-beautiful-dnd';\nimport Thing from './Thing';\n\nexport default class Column extends React.Component {\n    render() {\n        return (\n            <div className=\"columnContainer\">\n                <h2>{this.props.column.title}</h2>\n                <Droppable droppableId={this.props.column.id}>\n                    {(provided) => (\n                        <div className=\"column\" \n                            ref={provided.innerRef}\n                            {...provided.droppableProps}\n                        >\n                            {this.props.things.map((thing, index) => \n                                <Thing key={thing.id} thing={thing} index={index}/>\n                            )}\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable>\n            </div>\n        )   \n    }\n}","const data = {\n    things: {\n        'thing-1': {id: 'thing-1', content: 'Thing 1'},\n        'thing-2': {id: 'thing-2', content: 'Thing 2'},\n        'thing-3': {id: 'thing-3', content: 'Thing 3'},\n        'thing-4': {id: 'thing-4', content: 'Thing 4'}\n    },\n    columns: {\n        'unselected': {\n            id: 'unselected',\n            title: 'Unselected',\n            thingIds: ['thing-1', 'thing-2', 'thing-3', 'thing-4']\n        },\n        'selected': {\n            id: 'selected',\n            title: 'Selected',\n            thingIds: []\n        }\n    },\n    columnOrder: ['unselected', 'selected']\n};\n\nexport default data;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport './main.scss';\n\nimport Column from './components/Column';\n\nimport data from './data';\n\nclass App extends React.Component {\n  state = data;\n\n  previousState = [];\n  futureState= [];\n\n  logState = (e) => {\n    console.log(this.state);\n    console.log(this.previousState);\n    console.log(this.futureState);\n  }\n\n  undo = (e) => {\n    this.futureState.unshift(this.state); //add current state to front end of future array\n    this.setState(this.previousState[this.previousState.length-1]); //set current state to last previous state\n    this.previousState.splice(this.previousState.length-1, 1) //remove last previous state from array\n  }\n\n  redo = (e) => {\n    this.previousState.push(this.state); //add current state to end of previous state array\n    this.setState(this.futureState[0]); //set current state to most recent future state\n    this.futureState.shift(); //remove most recent future state from array\n  }\n\n  onDragEnd = (result) => {\n    const { destination, source, draggableId } = result;\n\n    //if thing isn't dropped in a droppable destination, return\n    if (!destination) {\n      return;\n    }\n\n    //if thing is dropped into to its current destination, return\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    const start = this.state.columns[source.droppableId]; //source column\n    const finish = this.state.columns[destination.droppableId]; //destination column\n\n    if (start === finish){ //if thing is dropped into a different position in the same column\n      const newThingIds = Array.from(start.thingIds);\n      newThingIds.splice(source.index, 1); //splice thing from its current index and into its destination index\n      newThingIds.splice(destination.index, 0, draggableId);\n      const newColumn = {\n        ...start,\n        thingIds: newThingIds //replace column's thing array with new array\n      };\n      const newState = { //create new state to reflect updated column\n        ...this.state,\n        columns: {\n          ...this.state.columns,\n          [newColumn.id]: newColumn\n        }\n      }\n      this.previousState.push(this.state) //push current state to previousState array\n      this.setState(newState); //update current state to new state\n      return;\n    }\n\n    //if thing is dropped into different column:\n    const startThingIds = Array.from(start.thingIds);\n    startThingIds.splice(source.index, 1); //remove thing from source column\n    const newStart = { //create new source column to reflect changes\n      ...start,\n      thingIds: startThingIds\n    }\n    const finishThingIds = Array.from(finish.thingIds);\n    finishThingIds.splice(destination.index, 0, draggableId); //add thing to destination column\n    const newFinish = { //create new destination column to reflect changes\n      ...finish,\n      thingIds: finishThingIds\n    }\n    const newState = { //create new state to reflect updated columns\n      ...this.state,\n      columns: {\n        ...this.state.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish\n      }\n    }\n    this.previousState.push(this.state) //push current state to previousState array\n    this.setState(newState); //update current state to new state\n  }\n\n  render(){\n    return(\n      <div className=\"appContainer\">\n        <div className=\"dragContainer\">\n          <DragDropContext onDragEnd={this.onDragEnd}>\n            {this.state.columnOrder.map(columnId => {\n              const column = this.state.columns[columnId];\n              const things = column.thingIds.map(thingId => this.state.things[thingId]);\n              return <Column key={column.id} column={column} things={things} />\n            })}\n          </DragDropContext>\n        </div>\n        <div className=\"buttonContainer\">\n          <div className=\"button\" onClick={this.undo}>Undo</div>\n          <div className=\"button\" onClick={this.redo}>Redo</div>\n          <div className=\"button\" onClick={this.logState}>Log State</div>\n        </div>\n      </div>\n    ) \n  }\n}\n\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}